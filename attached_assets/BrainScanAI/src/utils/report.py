
from fpdf import FPDF
from datetime import datetime
import numpy as np
import io
from PIL import Image

class TumorReport(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 15)
        self.cell(0, 10, 'CNN-Based Brain Tumor Analysis Report', 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def generate_report(image, prediction):
    """
    Generate a PDF report of the analysis with CNN model details
    """
    # Create PDF object
    pdf = TumorReport()
    pdf.add_page()

    # Add timestamp
    pdf.set_font('Arial', '', 12)
    pdf.cell(0, 10, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1)
    pdf.ln(5)
    
    # Add model information
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, "Model Information:", 0, 1)
    pdf.set_font('Arial', '', 12)
    pdf.cell(0, 10, f"Model Used: {prediction['model_used'].upper()}", 0, 1)
    
    # Add a brief description of the model
    model_descriptions = {
        'vgg16': "VGG16 is a convolutional neural network model with 16 layers. It's known for its simplicity and effectiveness in image classification tasks.",
        'resnet': "ResNet (Residual Network) uses skip connections to solve the vanishing gradient problem, enabling training of very deep networks.",
        'efficientnet': "EfficientNet uses a compound scaling method to balance network depth, width, and resolution for optimal performance.",
        'yolo': "YOLO (You Only Look Once) is a real-time object detection system that identifies objects and their locations in a single pass."
    }
    
    pdf.set_font('Arial', 'I', 10)
    pdf.multi_cell(0, 5, model_descriptions.get(prediction['model_used'], "Advanced neural network model"))
    pdf.ln(5)

    # Analysis results
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, "Analysis Results:", 0, 1)
    pdf.set_font('Arial', '', 12)
    pdf.cell(0, 10, f"Detected Tumor Type: {prediction['type']}", 0, 1)
    pdf.cell(0, 10, f"Confidence Score: {prediction['confidence']:.2f}%", 0, 1)
    pdf.ln(5)

    # Tumor characteristics (if tumor detected)
    if prediction['type'] != 'No Tumor':
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, "Tumor Characteristics:", 0, 1)
        pdf.set_font('Arial', '', 12)
        pdf.cell(0, 10, f"Size: {prediction['features']['size']:.1f} cm", 0, 1)
        pdf.cell(0, 10, f"Location: {prediction['features']['location']}", 0, 1)
        pdf.cell(0, 10, f"Intensity: {prediction['features']['intensity']:.2f}", 0, 1)
        pdf.ln(10)
        
        # Add information about the specific tumor type
        tumor_info = {
            'Glioma': "Gliomas are tumors that occur in the brain and spinal cord. They begin in glial cells that surround and support nerve cells.",
            'Meningioma': "Meningiomas arise from the meninges, the membranes that surround your brain and spinal cord. Most are noncancerous.",
            'Pituitary': "Pituitary tumors are abnormal growths that develop in the pituitary gland at the base of the brain."
        }
        
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, f"About {prediction['type']}:", 0, 1)
        pdf.set_font('Arial', '', 10)
        pdf.multi_cell(0, 5, tumor_info.get(prediction['type'], ""))
        pdf.ln(5)

    # Technical Details
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, "Technical Details:", 0, 1)
    pdf.set_font('Arial', '', 10)
    
    # Create a simple table for technical details
    col_width = 60
    pdf.cell(col_width, 10, "Parameter", 1, 0, 'L')
    pdf.cell(col_width, 10, "Value", 1, 1, 'L')
    
    # Add model architecture info
    pdf.cell(col_width, 10, "Model Architecture", 1, 0, 'L')
    pdf.cell(col_width, 10, prediction['model_used'].upper(), 1, 1, 'L')
    
    # Add image dimensions
    pdf.cell(col_width, 10, "Image Dimensions", 1, 0, 'L')
    pdf.cell(col_width, 10, "224 x 224 pixels", 1, 1, 'L')
    
    # Add preprocessing methods
    pdf.cell(col_width, 10, "Preprocessing", 1, 0, 'L')
    pdf.cell(col_width, 10, "CLAHE, Gaussian Filter", 1, 1, 'L')
    
    # Add confidence
    pdf.cell(col_width, 10, "Confidence", 1, 0, 'L')
    pdf.cell(col_width, 10, f"{prediction['confidence']:.2f}%", 1, 1, 'L')
    
    pdf.ln(10)

    # Disclaimer
    pdf.set_font('Arial', 'B', 10)
    pdf.cell(0, 10, "DISCLAIMER:", 0, 1)
    pdf.set_font('Arial', '', 10)
    pdf.multi_cell(0, 5, "This report is generated by an automated system using deep learning models and should be used for reference only. Please consult with qualified medical professionals for diagnosis and treatment decisions.")
    pdf.ln(5)
    
    pdf.set_font('Arial', 'I', 8)
    pdf.multi_cell(0, 4, f"Analysis performed using {prediction['model_used'].upper()} deep learning model. Results should be verified by a specialist.")

    # Get the PDF as bytes
    pdf_bytes = pdf.output(dest='S').encode('latin1')
    return pdf_bytes
